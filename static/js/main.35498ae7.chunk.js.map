{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","api.ts","components/FindMovie/FindMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","API_URL","getMovie","query","a","fetch","response","json","Response","Error","FindMovie","addMovie","useState","setQuery","setMovie","isError","setIsError","isLoading","setIsLoading","handleAdd","newMovie","handleSubmit","event","preventDefault","trim","loadedMovie","Poster","Title","Plot","imdbID","onSubmit","htmlFor","value","type","id","placeholder","onChange","target","disabled","classNames","onClick","App","setMovies","find","movieInList","currentMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.35498ae7.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?i=tt3896198&apikey=5a03dcb7';\n\nexport async function getMovie(\n  query: string,\n): Promise<MovieData | ResponseError> {\n  const response = await fetch(`${API_URL}&t=${query}`);\n\n  try {\n    return await response.json();\n  } catch {\n    return ({\n      Response: 'False',\n      Error: 'unexpected error',\n    });\n  }\n}\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { Movie } from '../../types/Movie';\nimport { getMovie } from '../../api';\nimport './FindMovie.scss';\nimport { MovieData } from '../../types/MovieData';\nimport { MovieCard } from '../MovieCard';\nimport { ResponseError } from '../../types/ReponseError';\n\ntype Props = {\n  addMovie: (movie: Movie) => void;\n};\n\nexport const FindMovie: React.FC<Props> = ({ addMovie }) => {\n  const [query, setQuery] = useState('');\n  const [movie, setMovie] = useState<Movie | null>(null);\n  const [isError, setIsError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // eslint-disable-next-line max-len\n  const defaultPicture = 'https://via.placeholder.com/360x270.png?text=no%20preview';\n\n  const resetAll = () => {\n    setQuery('');\n    setMovie(null);\n  };\n\n  const handleAdd = (newMovie: Movie) => {\n    addMovie(newMovie);\n    resetAll();\n  };\n\n  const handleInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setIsError(false);\n    setQuery(event.target.value);\n  };\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n    setIsLoading(true);\n\n    try {\n      const loadedMovie: MovieData | ResponseError\n      = await getMovie(query.trim());\n\n      if ('Error' in loadedMovie) {\n        throw Error('no film found');\n      } else {\n        const imgUrl = loadedMovie.Poster !== 'N/A'\n          ? loadedMovie.Poster\n          : defaultPicture;\n\n        const newMovie: Movie = {\n          title: loadedMovie.Title,\n          description: loadedMovie.Plot,\n          imgUrl,\n          imdbUrl: `https://www.imdb.com/title/${loadedMovie.imdbID}`,\n          imdbId: loadedMovie.imdbID,\n        };\n\n        setIsError(false);\n        setMovie(newMovie);\n      }\n    } catch {\n      setIsError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              value={query}\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-dander\"\n              onChange={handleInput}\n            />\n          </div>\n\n          {isError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              disabled={!query}\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={classNames(\n                'button',\n                'is-light',\n                { 'is-loading': isLoading },\n              )}\n            >\n\n              {movie\n                ? 'Find a movie'\n                : 'Search again'}\n            </button>\n          </div>\n\n          <div className=\"control\">\n            {movie && (\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={() => handleAdd(movie)}\n              >\n                Add to the list\n              </button>\n            )}\n          </div>\n        </div>\n      </form>\n\n      {movie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={movie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const addMovie = (movie: Movie) => {\n    if (movies.find(movieInList => movieInList.imdbId === movie.imdbId)) {\n      setMovies(movies);\n    } else {\n      setMovies(currentMovies => [...currentMovies, movie]);\n    }\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie addMovie={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}